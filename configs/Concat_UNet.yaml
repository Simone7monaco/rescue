---
key: purple
binary: True
batch_size: 8
n_channels: 12
epochs: 50
imagenet: False
seed: 47
patience: 5
tol: 0.01
fold_separation_csv: '../data/sentinel-hub/satellite_data.CSV'

criterion: 
  name: nn.BCEWithLogitsLoss

regr_criterion:
  name: nn.MSELoss

model:
  name: ConcatenatedUNet
  n_channels: 12
  act: relu

optimizer:
  name: optim.Adam
  lr: 0.0001
  weight_decay: 0
    
# scheduler_tuple= [optim.lr_scheduler.ReduceLROnPlateau, {'factor': 0.25, 'patience': 2}]

# Input dataset
dataset_specs:
  folder: '../data/sentinel-hub'
  mask_one_hot: False
  height: 480
  width: 480
  product_list: ['sentinel2']
  mode: 'post'
  filter_validity_mask: True
  process_dict:
    sentinel2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
  activation_date_csv: '../data/geospatialdownloader/scripts/satellite_data.csv'
  mask_filtering: False
  only_burnt: True
  

# Training callbacks
trainer:
 gpus: 1
 log_every_n_steps: 1
 progress_bar_refresh_rate: 1
 benchmark: True
 precision: 16
 gradient_clip_val: 5.0
 num_sanity_val_steps: 3
 sync_batchnorm: True
# distributed_backend="ddp",  # DistributedDataParallel
# resume_from_checkpoint="cyst_checkpoints/prova1/epoch=20-step=8546.ckpt"

earlystopping:
  monitor: val_loss
  min_delta: 0.001
  patience: 5
  verbose: True
  mode: min
  
checkpoint:
  monitor: val_loss
  verbose: True
  mode: min
  save_top_k: 2
  
  
# if model_type == ConcatTypes.BCE_MSE:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.BCEWithLogitsLoss()}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.MSELoss()}
# elif model_type == ConcatTypes.DICE_MSE:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': GDiceLossV2()}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.MSELoss()}
# elif model_type == ConcatTypes.SoftIoU_MSE:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': FuzzyIoULoss()}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.MSELoss()}
# elif model_type == ConcatTypes.SoftIoU_SoftIoU:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': FuzzyIoULoss()}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': softIoULoss()}
# elif model_type == ConcatTypes.ComboBSM:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': ComboLoss(nn.BCEWithLogitsLoss(), FuzzyIoULoss())}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.MSELoss()}
# elif model_type == ConcatTypes.ComboBDM:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': ComboLoss(nn.BCEWithLogitsLoss(), GDiceLossV2())}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.MSELoss()}
# elif model_type == ConcatTypes.F1MSE:
#     loss_first_args = {'index': 0, 'gt_one_hot': training_config.mask_one_hot, 'loss': nn.BCEWithLogitsLoss()}
#     loss_second_args = {'index': 1, 'gt_one_hot': training_config.mask_one_hot, 'loss': F1MSE()}